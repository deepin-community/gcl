Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 gcl (2.6.12-99) unstable; urgency=medium
 .
   * Version_2.6.13pre95
Author: Camm Maguire <camm@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2020-12-04

--- gcl-2.6.12.orig/cmpnew/gcl_cmpmulti.lsp
+++ gcl-2.6.12/cmpnew/gcl_cmpmulti.lsp
@@ -168,14 +168,16 @@
   (let ((*value-to-go* 'top)*top-data*)
     (c2expr* form) (setq top-data *top-data*))
   (and *record-call-info* (record-call-info nil (car top-data)))
-  (wt-nl "if(vs_base>vs_top) vs_top=vs_base;*vs_top=Cnil;")
+  (wt-nl "if(vs_base>vs_top) vs_top=vs_base;")
+  (wt-nl "*vs_top=Cnil;")
   (do ((vs vrefs (cdr vs)))
       ((endp vs))
       (let ((vref (car vs)))
 	(set-var 'fun-val (car vref) (cadr vref))
 	(unless (endp (cdr vs)) (wt-nl "if(vs_base<vs_top) vs_base++;"))))
   (cond ((null vrefs)
-         (wt-nl "if(vs_base==vs_top){vs_base[0]=Cnil;vs_top=vs_base+1;}")
+         (wt-nl "if(vs_base==vs_top){vs_base[0]=Cnil;}")
+         (wt-nl "vs_top=vs_base+1;}")
          (unwind-exit 'fun-val))
         (t (unless (eq *exit* 'return) (wt-nl) (reset-top))
            (unwind-exit (cons 'var (car vrefs))))))
@@ -238,7 +240,8 @@
 
   (and *record-call-info* (record-call-info nil (car top-data)))
 
-  (wt-nl "if(vs_base>vs_top) vs_top=vs_base;*vs_top=Cnil;")
+  (wt-nl "if(vs_base>vs_top) vs_top=vs_base;")
+  (wt-nl "*vs_top=Cnil;")
   (do ((vs vars (cdr vs)))
       ((endp vs))
       (c2bind-loc (car vs) '(vs-base 0))
--- gcl-2.6.12.orig/configure
+++ gcl-2.6.12/configure
@@ -3979,7 +3979,7 @@ add_args_to_cflags -fsigned-char -pipe -
                     -fno-PIE -fno-pie -fno-PIC -fno-pic \
 	            -Wall \
 	            -Wno-builtin-requires-header -Wno-empty-body -Wno-self-assign \
-	            -Wno-unused-but-set-variable -Wno-misleading-indentation
+	            -Wno-unused-but-set-variable
 
 add_args_to_ldflags -no-pie -Wl,-z,lazy
 
@@ -7946,19 +7946,10 @@ fi
 $as_echo "$ac_cv_lib_readline_rl_initialize" >&6; }
 if test "x$ac_cv_lib_readline_rl_initialize" = xyes; then :
 
-$as_echo "#define HAVE_READLINE 1" >>confdefs.h
+$as_echo "#define USE_READLINE 1" >>confdefs.h
 
-				   TLIBS="$TLIBS -lreadline" #some machines don't link this, e.g. Slackware
-				   RL_OBJS=gcl_readline.o
-fi
-
-fi
-
-done
-
-
-    # These tests discover differences between readline 4.1 and 4.3
-    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for rl_completion_matches in -lreadline" >&5
+				 # These tests discover differences between readline 4.1 and 4.3
+				 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for rl_completion_matches in -lreadline" >&5
 $as_echo_n "checking for rl_completion_matches in -lreadline... " >&6; }
 if ${ac_cv_lib_readline_rl_completion_matches+:} false; then :
   $as_echo_n "(cached) " >&6
@@ -8003,6 +7994,14 @@ $as_echo "#define HAVE_RL_COMPENTRY_FUNC
 
 fi
 
+   				 TLIBS="$TLIBS -lreadline" #some machines don't link this, e.g. Slackware
+				 RL_OBJS=gcl_readline.o
+fi
+
+fi
+
+done
+
 fi
 
 
--- gcl-2.6.12.orig/configure.in
+++ gcl-2.6.12/configure.in
@@ -263,7 +263,7 @@ add_args_to_cflags -fsigned-char -pipe -
                     -fno-PIE -fno-pie -fno-PIC -fno-pic \
 	            -Wall \
 	            -Wno-builtin-requires-header -Wno-empty-body -Wno-self-assign \
-	            -Wno-unused-but-set-variable -Wno-misleading-indentation
+	            -Wno-unused-but-set-variable
 
 add_args_to_ldflags -no-pie -Wl,-z,lazy
 
@@ -1713,15 +1713,14 @@ fi
 
 if test "$enable_readline" != "no" ; then
     AC_CHECK_HEADERS([readline/readline.h],
-		     AC_CHECK_LIB([readline],[rl_initialize],
-				  [AC_DEFINE(HAVE_READLINE,1,[have readline library]) 
-				   TLIBS="$TLIBS -lreadline" #some machines don't link this, e.g. Slackware
-				   RL_OBJS=gcl_readline.o]))
-    
-    # These tests discover differences between readline 4.1 and 4.3
-    AC_CHECK_LIB([readline],[rl_completion_matches],
-		 [AC_DEFINE(HAVE_DECL_RL_COMPLETION_MATCHES,1,[have readline completion matches])
-		  AC_DEFINE(HAVE_RL_COMPENTRY_FUNC_T,1,[have readline completion matches])])
+			AC_CHECK_LIB([readline],[rl_initialize],
+				[AC_DEFINE(USE_READLINE,1,[use readline library]) 
+				 # These tests discover differences between readline 4.1 and 4.3
+				 AC_CHECK_LIB([readline],[rl_completion_matches],
+					[AC_DEFINE(HAVE_DECL_RL_COMPLETION_MATCHES,1,[have readline completion matches])
+				 	 AC_DEFINE(HAVE_RL_COMPENTRY_FUNC_T,1,[have readline completion matches])])
+   				 TLIBS="$TLIBS -lreadline" #some machines don't link this, e.g. Slackware
+				 RL_OBJS=gcl_readline.o]))
 fi
 
 AC_SUBST(RL_OBJS)
--- gcl-2.6.12.orig/h/gclincl.h.in
+++ gcl-2.6.12/h/gclincl.h.in
@@ -186,9 +186,6 @@
 /* have putenv call */
 #undef HAVE_PUTENV
 
-/* have readline library */
-#undef HAVE_READLINE
-
 /* Define to 1 if you have the <readline/readline.h> header file. */
 #undef HAVE_READLINE_READLINE_H
 
@@ -374,6 +371,9 @@
 /* use fionbio for non-blocking io */
 #undef USE_FIONBIO
 
+/* use readline library */
+#undef USE_READLINE
+
 /* protect cdr from immfix and speed up type processing */
 #undef USE_SAFE_CDR
 
--- gcl-2.6.12.orig/h/include.h
+++ gcl-2.6.12/h/include.h
@@ -99,7 +99,7 @@ Foundation, 675 Mass Ave, Cambridge, MA
 #ifdef HAVE_ALLOCA_H
 #include <alloca.h>
 #endif
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
 #include <readline/readline.h>
 #endif
 
--- gcl-2.6.12.orig/h/prelink.h
+++ gcl-2.6.12/h/prelink.h
@@ -27,7 +27,7 @@ PRELINK_EXTER FILE *my_stdin;
 PRELINK_EXTER FILE *my_stdout;
 PRELINK_EXTER FILE *my_stderr;
 
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
 PRELINK_EXTER rl_compentry_func_t **my_rl_completion_entry_function_ptr;
 PRELINK_EXTER const char **my_rl_readline_name_ptr;
 #endif
--- gcl-2.6.12.orig/o/file.d
+++ gcl-2.6.12/o/file.d
@@ -38,7 +38,7 @@ Foundation, 675 Mass Ave, Cambridge, MA
 #define IN_FILE
 #include "include.h"
 
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
 #define kclgetc(FP)		rl_getc_em(((FILE *)FP))
 #define kclungetc(C, FP)	rl_ungetc_em(C, ((FILE *)FP))
 #define kclputc(C, FP)		rl_putc_em(C, ((FILE *)FP))
@@ -46,7 +46,7 @@ Foundation, 675 Mass Ave, Cambridge, MA
 #define	kclgetc(FP)		getc(((FILE *)FP))
 #define	kclungetc(C, FP)	ungetc(C, ((FILE *)FP))
 #define	kclputc(C, FP)		putc(C, ((FILE *)FP))
-#endif /* HAVE_READLINE */
+#endif /* USE_READLINE */
 
 #define	xkclfeof(c,FP)		feof(((FILE *)FP))
 
@@ -109,7 +109,7 @@ feof1(fp)
 FILE *fp;
 {
 
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
   if (rl_stream_p(fp) && rl_eof_p(fp))
     return TRUE;
 #endif
@@ -1258,7 +1258,7 @@ BEGIN:
 	case smm_input:
 	case smm_io:
 
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
 	  if (rl_stream_p(strm->sm.sm_fp))
 	    return rl_pending_buffered_input_p(strm->sm.sm_fp);
 #endif
@@ -2372,7 +2372,7 @@ gcl_init_file_function()
 	make_si_function("USER-STREAM-STATE", siLuser_stream_state);
 #endif
 
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
 	gcl_init_readline_function();
 #endif
 }
--- gcl-2.6.12.orig/o/gcl_readline.d
+++ gcl-2.6.12/o/gcl_readline.d
@@ -27,7 +27,7 @@ Foundation, 675 Mass Ave, Cambridge, MA
 #define IN_READLINE
 #include "include.h"
 
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
 
 /* Here begins GNU Readline support. It was designed for Maxima,
  * but it works with GCL fine too. If you want to include word completion
@@ -391,4 +391,4 @@ gcl_init_readline(void) {
   make_si_function("READLINE-OFF", siLreadline_off);
 }
 
-#endif /* HAVE_READLINE */
+#endif /* USE_READLINE */
--- gcl-2.6.12.orig/o/main.c
+++ gcl-2.6.12/o/main.c
@@ -555,7 +555,7 @@ main(int argc, char **argv, char **envp)
     terminal_io->sm.sm_object1->sm.sm_fp = stdout;
 
     gcl_init_big1();
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
     gcl_init_readline_function();
 #endif
 #ifdef NEED_STACK_CHK_GUARD
@@ -755,7 +755,7 @@ initlisp(void) {
 #ifdef CMAC
 	gcl_init_cmac();
 #endif	
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
 	gcl_init_readline();
 #endif
 
@@ -1185,7 +1185,7 @@ init_main(void) {
       }  }
 #endif	 
   
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
   ADD_FEATURE("READLINE");
 #endif
 #if !defined(USE_DLOPEN)
--- gcl-2.6.12.orig/o/prelink.c
+++ gcl-2.6.12/o/prelink.c
@@ -7,7 +7,7 @@ extern FILE *stdin __attribute__((weak))
 extern FILE *stderr __attribute__((weak));
 extern FILE *stdout __attribute__((weak));
 
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
 #if RL_READLINE_VERSION < 0x0600
 extern Function		*rl_completion_entry_function __attribute__((weak));
 extern char		*rl_readline_name __attribute__((weak));
@@ -24,7 +24,7 @@ prelink_init(void) {
   my_stdin=stdin;
   my_stdout=stdout;
   my_stderr=stderr;
-#ifdef HAVE_READLINE
+#ifdef USE_READLINE
   my_rl_completion_entry_function_ptr=(void *)&rl_completion_entry_function;
   my_rl_readline_name_ptr=(void *)&rl_readline_name;
 #endif
