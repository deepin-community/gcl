Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 gcl (2.6.12-7) unstable; urgency=medium
 .
   * Version_2_6_13pre6
Author: Camm Maguire <camm@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- gcl-2.6.12.orig/h/att_ext.h
+++ gcl-2.6.12/h/att_ext.h
@@ -29,7 +29,7 @@ void *malloc(size_t);
 void *realloc(void *,size_t);
 /* void * memalign(size_t,size_t); */
 void *alloc_contblock(size_t);
-void *alloc_relblock(size_t);
+inline void *alloc_relblock(size_t);
 /* object fSallocate_contiguous_pages(); */
 /* object fSallocate_relocatable_pages(); */
 
--- gcl-2.6.12.orig/h/protoize.h
+++ gcl-2.6.12/h/protoize.h
@@ -7,7 +7,7 @@
 /* alloc.c:364:OF */ extern object on_stack_cons (object x, object y); /* (x, y) object x; object y; */
 /* alloc.c:376:OF */ extern object fSallocated (object typ); /* (typ) object typ; */
 /* alloc.c:401:OF */ extern object fSreset_number_used (object typ); /* (typ) object typ; */
-/* alloc.c:480:OF */ extern void insert_contblock (void *p, ufixnum s); /* (p, s) char *p; int s; */
+/* alloc.c:480:OF */ extern inline void insert_contblock (void *p, ufixnum s); /* (p, s) char *p; int s; */
 /* alloc.c:480:OF */ extern void insert_maybe_sgc_contblock (char *p, int s); /* (p, s) char *p; int s; */
 /* alloc.c:611:OF */ extern void set_maxpage (void); /* () */
 /* alloc.c:635:OF */ extern void gcl_init_alloc (void *); /* () */
--- gcl-2.6.12.orig/o/gbc.c
+++ gcl-2.6.12/o/gbc.c
@@ -422,7 +422,11 @@ DEFVAR("*LEAF-COLLECTION-THRESHOLD*",sSA
 
 static inline bool
 marking(void *p) {
-  return (sgc_enabled ? ON_WRITABLE_PAGE_CACHED(p) : !NULL_OR_ON_C_STACK(p));
+  return (
+#ifdef SGC
+	  sgc_enabled ? ON_WRITABLE_PAGE_CACHED(p) :
+#endif
+	  !NULL_OR_ON_C_STACK(p));
 }
 
 static inline bool
@@ -483,7 +487,11 @@ mark_object_address(object *o,int f) {
   
   if (lp!=p || !f) {
     lp=p;
-    lr=sgc_enabled ? WRITABLE_PAGE_P(lp) : 1;
+    lr=
+#ifdef SGC
+      sgc_enabled ? WRITABLE_PAGE_P(lp) :
+#endif
+      1;
   }
 
   if (lr)
--- gcl-2.6.12.orig/o/main.c
+++ gcl-2.6.12/o/main.c
@@ -147,8 +147,8 @@ mbrk(void *v) {
 
 #include <Windows.h>
 
-ufixnum
-get_phys_pages_no_malloc(void) {
+static ufixnum
+get_phys_pages_no_malloc(char n) {
   MEMORYSTATUS m;
 
   m.dwLength=sizeof(m);
@@ -161,8 +161,8 @@ get_phys_pages_no_malloc(void) {
 
 #include <sys/sysctl.h>
 
-ufixnum
-get_phys_pages_no_malloc(void) {
+static ufixnum
+get_phys_pages_no_malloc(char n) {
   uint64_t s;
   size_t z=sizeof(s);
   int m[2]={CTL_HW,HW_MEMSIZE};
@@ -176,8 +176,8 @@ get_phys_pages_no_malloc(void) {
 
 #elif defined(__sun__)
 
-ufixnum
-get_phys_pages_no_malloc(void) {
+static ufixnum
+get_phys_pages_no_malloc(char n) {
 
   return sysconf(_SC_PHYS_PAGES);
 
@@ -202,7 +202,7 @@ get_proc_meminfo_value_in_pages(const ch
   return n>>(PAGEWIDTH-10);
 }
   
-ufixnum
+static ufixnum
 get_phys_pages_no_malloc(char freep) {
   return freep ? 
     get_proc_meminfo_value_in_pages("MemFree:")+
--- gcl-2.6.12.orig/o/sfaslcoff.c
+++ gcl-2.6.12/o/sfaslcoff.c
@@ -205,9 +205,7 @@ load_memory(struct scnhdr *sec1,struct s
   memory->cfd.cfd_size=sz;
   memory->cfd.cfd_self=0;
   memory->cfd.cfd_start=0;
-  prefer_low_mem_contblock=TRUE;
-  memory->cfd.cfd_start=alloc_contblock(sz);
-  prefer_low_mem_contblock=FALSE;
+  memory->cfd.cfd_start=alloc_code_space(sz);
 
   for (sec=sec1;sec<sece;sec++) {
     sec->s_paddr+=(ul)memory->cfd.cfd_start;
--- gcl-2.6.12.orig/o/sfaslmacho.c
+++ gcl-2.6.12/o/sfaslmacho.c
@@ -207,9 +207,7 @@ load_memory(struct section *sec1,struct
   memory->cfd.cfd_size=sz; 
   memory->cfd.cfd_self=0; 
   memory->cfd.cfd_start=0; 
-  prefer_low_mem_contblock=TRUE;
-  memory->cfd.cfd_start=alloc_contblock(sz);
-  prefer_low_mem_contblock=FALSE;
+  memory->cfd.cfd_start=alloc_code_space(sz);
 
   a=(ul)memory->cfd.cfd_start;
   a=(a+ma)&~ma;
--- gcl-2.6.12.orig/unixport/sys_init.lsp.in
+++ gcl-2.6.12/unixport/sys_init.lsp.in
@@ -28,7 +28,7 @@
        (pcl (append x (list "pcl")))
        (clcs (append x (list "clcs")))
        (gtk (append x (list "gcl-tk"))))
-  (dolist (d (list lsp cmpnew #-pre-gcl xgcl-2 #+(or pcl ansi-cl) pcl #+ansi-cl clcs))
+  (dolist (d (list lsp cmpnew #+(and xgcl (not pre-gcl)) xgcl-2 #+(or pcl ansi-cl) pcl #+ansi-cl clcs))
     (load (make-pathname :name "sys-proclaim" :type "lisp" :directory d)))
   (load (make-pathname :name "tk-package" :type "lsp" :directory gtk))
   (load (make-pathname :name "gcl_lfun_list" :type "lsp" :directory cmpnew))
@@ -77,6 +77,5 @@
 
 #-ansi-cl(use-package :cltl1-compat :lisp)
 #-ansi-cl(do-symbols (s :cltl1-compat) (export s :lisp)))
-(export '*load-pathname* :si);For maxima, at least as of 5.34.1
 
 #+ansi-cl (use-package :pcl :user)
