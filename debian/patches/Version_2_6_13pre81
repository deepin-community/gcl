Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 gcl (2.6.12-84) unstable; urgency=medium
 .
   * Version_2_6_13pre80
Author: Camm Maguire <camm@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2019-03-28

--- gcl-2.6.12.orig/o/alloc.c
+++ gcl-2.6.12/o/alloc.c
@@ -329,7 +329,7 @@ empty_relblock(void) {
 void
 setup_rb(bool preserve_rb_pointerp) {
 
-  int lowp=new_rb_start!=rb_start || rb_high();
+  int lowp=rb_high();
 
   update_pool(2*(nrbpage-page(rb_size())));
   rb_start=new_rb_start;
@@ -349,10 +349,13 @@ resize_hole(ufixnum hp,enum type tp,bool
   char *start=rb_begin(),*new_start=heap_end+hp*PAGESIZE;
   ufixnum size=rb_pointer-start;
 
-  if (!in_placep &&
-      ((new_start<=start && start<new_start+size) || (new_start<start+size && start+size<=new_start+size))) {
+  if (!in_placep && (rb_high() ?
+		     new_start+size>rb_end :
+		     new_start+(nrbpage<<PAGEWIDTH)<start+size
+		     /* 0 (20190401  never reached)*/
+		     )) {
     if (sSAnotify_gbcA->s.s_dbind != Cnil)
-      emsg("Toggling relblock when resizing hole to %lu\n",hp);
+      emsg("[GC Toggling relblock when resizing hole to %lu]\n",hp);
     tm_table[t_relocatable].tm_adjgbccnt--;
     GBC(t_relocatable);
     return resize_hole(hp,tp,in_placep);
@@ -389,7 +392,7 @@ alloc_page(long n) {
       d=(available_pages/3)<d ? (available_pages/3) : d;
       
       if (sSAnotify_gbcA && sSAnotify_gbcA->s.s_dbind != Cnil)
-	emsg("Hole overrun\n");
+	emsg("[GC Hole overrun]\n");
 
       resize_hole(d+nn,t_relocatable,0);
 
@@ -852,7 +855,7 @@ add_pages(struct typemanager *tm,fixnum
 
     if (rb_high() && m>((rb_start-heap_end)>>PAGEWIDTH)) {
       if (sSAnotify_gbcA->s.s_dbind != Cnil)
-	emsg("Moving relblock low before expanding relblock pages\n");
+	emsg("[GC Moving relblock low before expanding relblock pages]\n");
       tm_table[t_relocatable].tm_adjgbccnt--;
       GBC(t_relocatable);
     }
